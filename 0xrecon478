#!/usr/bin/env python3


import os
import subprocess
import sys
import re




ascii_art = r"""
   ___                               _  _ ______ ___
  / _ \                             | || |____  / _ \ 
 | | | |_  ___ __ ___  ___ ___  _ __| || |_  / / (_) |
 | | | \ \/ / '__/ _ \/ __/ _ \| '_ \__   _|/ / > _ <
 | |_| |>  <| | |  __/ (_| (_) | | | | | | / / | (_) |
  \___//_/\_\_|  \___|\___\___/|_| |_| |_|/_/   \___/
"""
print(ascii_art)




# Check the URL format
def get_full_url(target):
    if not re.match(r"^https?:\/\/", target):
        return f"https://{target}"
    return target

# Get command line arguments
if len(sys.argv) < 3 or sys.argv[1] != '-d':
    print("Please specify a valid domain or URL. Example usage: 0xrecon478 -d example.com")
    sys.exit(1)

target = sys.argv[2]

# Check the URL format
full_url = get_full_url(target)

# Extract domain for ParamSpider
domain = re.sub(r"^https?:\/\/", "", target)

# Run Katana for the full URL
print("[*] Running Katana...")
subprocess.run(["katana", "-u", full_url, "-H", "HackerOne-Username: 0x478", "-o", "katana_output.txt"])

# Run Wayback (normal operation)
print("[*] Running Wayback...")
subprocess.run(["waybackurls", full_url], stdout=open("wayback_output.txt", "w"))

# Run Wayback for specific file types (e.g., .pdf, .docx, etc.)
print("[*] Running Wayback for specific file types...")
subprocess.run(f"waybackurls {full_url} | grep --color -E '1\\.xls|\\.tar\\.gz|\\.bak|\\.xml|\\.xlsx|\\.json|\\.rar|\\.pdf|\\.sql|\\.doc|\\.docx|\\.pptx|\\.txt|\\.zip|\\.tgz|\\.7z'", shell=True, stdout=open("wayback_special_files.txt", "w"))

# Run Gau
print("[*] Running Gau...")
subprocess.run(["gau", full_url], stdout=open("gau_output.txt", "w"))

# Run ParamSpider for just the domain
print("[*] Running ParamSpider...")
subprocess.run(["paramspider", "-d", domain, "-o", "paramspider_output.txt"])

# Run LinkFinder and save the output to a file
print("[*] Running LinkFinder...")
subprocess.run(f"linkfinder -i {full_url} -r ^/ -o cli > linkfinder_output.txt", shell=True)

# Merge Katana, Wayback, and Gau outputs
print("[*] Merging Katana, Wayback, and Gau outputs...")

with open('allep.txt', 'w') as outfile:
    # Add Katana output
    with open('katana_output.txt', 'r') as infile:
        outfile.write(infile.read())
    # Add Wayback output
    with open('wayback_output.txt', 'r') as infile:
        outfile.write(infile.read())
    # Add Gau output
    with open('gau_output.txt', 'r') as infile:
        outfile.write(infile.read())

# Run Uro
print("[*] Running Uro on the data...")
subprocess.run("cat allep.txt | uro > cleanendpoint", shell=True)

# Remove allep.txt after processing
os.remove('allep.txt')

# Parse the cleanendpoint file and separate .js files
print("[*] Parsing and separating .js files...")

with open('cleanendpoint', 'r') as infile:
    js_files = []
    other_files = []
    
    # Check each line and separate .js files
    for line in infile:
        if line.endswith(".js\n"):  # If the line ends with .js
            js_files.append(line)
        else:
            other_files.append(line)

# Write .js files to js_files.txt
with open('js_files.txt', 'w') as js_outfile:
    for js in js_files:
        js_outfile.write(js)

# Write other files to other_files.txt
with open('other_files.txt', 'w') as other_outfile:
    for other in other_files:
        other_outfile.write(other)

# Clean up process
print("[*] .js files written to js_files.txt, other files written to other_files.txt.")

# Process complete
print("[*] All tools have been run, outputs merged, and cleaned.")
